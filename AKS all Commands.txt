
//Commands to be execute on Azure Portal CLI

//Variables setup
ResourceGroup="myResourceGroup"
ContainerRegistry="mycontainerregistry0707"
ContainerRegistryFullName="mycontainerregistry0707.azurecr.io"
AKSClusterName="myCluster"
manifestfilename="aksdemomanifest.yaml"
ApplicationGateway="myApplicationGateway"
PublicIp="myPublicIp"
Vnet="myVnet"
Subnet="mySubnet"
manifestfilename="aksdemomanifest.yaml"
 

--Creating AKS and ACR
az group create --resource-group $ResourceGroup --location eastus
az acr create --resource-group $ResourceGroup --name $ContainerRegistry --sku Basic
SubscriptionId=$(az account list --query "[?isDefault].id" -o tsv)
az aks create --resource-group $ResourceGroup --name $AKSClusterName --node-count 1 --generate-ssh-keys --attach-acr "/subscriptions/$SubscriptionId/resourceGroups/$ResourceGroup/providers/Microsoft.ContainerRegistry/registries/$ContainerRegistry" 

//Creating Application Gateway
az network public-ip create -n $PublicIp -g $ResourceGroup --allocation-method Static --sku Standard
az network vnet create -n $Vnet -g $ResourceGroup --address-prefix 10.0.0.0/16 --subnet-name $Subnet --subnet-prefix 10.0.0.0/24
az network application-gateway create -n $ApplicationGateway -l eastus -g $ResourceGroup --sku Standard_v2 --public-ip-address $PublicIp --vnet-name $Vnet --subnet $Subnet --priority 100

appgwId=$(az network application-gateway show -n $ApplicationGateway -g $ResourceGroup -o tsv --query "id")
az aks enable-addons -n $AKSClusterName -g $ResourceGroup  -a ingress-appgw --appgw-id $appgwId
nodeResourceGroup=$(az aks show -n $AKSClusterName -g $ResourceGroup  -o tsv --query "nodeResourceGroup")
aksVnetName=$(az network vnet list -g $nodeResourceGroup -o tsv --query "[0].name")
aksVnetId=$(az network vnet show -n $aksVnetName -g $nodeResourceGroup -o tsv --query "id")

az network vnet peering create -n "AppGWtoAKSVnetPeering" -g $ResourceGroup  --vnet-name $Vnet --remote-vnet $aksVnetId --allow-vnet-access
appGWVnetId=$(az network vnet show -n $Vnet -g $ResourceGroup  -o tsv --query "id")
az network vnet peering create -n "AKStoAppGWVnetPeering" -g $nodeResourceGroup --vnet-name $aksVnetName --remote-vnet $appGWVnetId --allow-vnet-access 

//Kubernetes commands (Can be execute on Azure Portal CLI after docker images push into container registry)
//az aks get-credentials --resource-group $ResourceGroup --name $AKSClusterName --admin
//kubectl apply -f $manifestfilename
//kubectl get all
//kubectl get ingress
//kubectl get pods


//Docker Image building command to create API containerized images
set imageName="orderapiimage"
set secondimageName="productapiimage"
docker build -t  %imageName% . (Navigate to docker file path under respective (Order API) solution folder and execute these commands to build image)
docker build -t  %secondimageName% . (Navigate to docker file path under respective (Product API) solution folder and execute these commands to build image)


//Commands to be executed on local command prompt
set ContainerRegistryFullName="mycontainerregistry0707.azurecr.io"
set imageName="orderapiimage"
set taggedimageName="orderapiimage:v1"
set secondimageName="productapiimage"
set secondtaggedimageName="productapiimage:v1"
docker tag %imageName% %ContainerRegistryFullName%/%taggedimageName%
docker tag %secondimageName% %ContainerRegistryFullName%/%secondtaggedimageName%
az login
az acr login --name %ContainerRegistryFullName%
docker push %ContainerRegistryFullName%/%taggedimageName%
docker push %ContainerRegistryFullName%/%secondtaggedimageName%

set ResourceGroup="myResourceGroup"
set AKSClusterName="myCluster"
set manifestfilename="aksdemomanifest.yaml"

az aks get-credentials --resource-group %ResourceGroup% --name %AKSClusterName% --admin
kubectl apply -f %manifestfilename%
kubectl get all
kubectl get ingress

//Deleteing Resource Group for Saving resources
az group delete --resource-group %ResourceGroup%

